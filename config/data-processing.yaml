# Data Processing Configuration
# This file defines how character data is extracted and transformed

# Extraction definitions - map raw data to structured output
extractions:
  # Skill extractions
  skills:
    type: computed
    output: extracted.skills
    baseValue: level
    addLevelCondition: proficiency > 0
    mappings:
      acrobatics:
        ability: dex
        proficiency: build.proficiencies.acrobatics
        itemBonus: build.mods.Acrobatics.ItemBonus
      arcana:
        ability: int
        proficiency: build.proficiencies.arcana
        itemBonus: build.mods.Arcana.ItemBonus
      athletics:
        ability: str
        proficiency: build.proficiencies.athletics
        itemBonus: build.mods.Athletics.ItemBonus
      crafting:
        ability: int
        proficiency: build.proficiencies.crafting
        itemBonus: build.mods.Crafting.ItemBonus
      deception:
        ability: cha
        proficiency: build.proficiencies.deception
        itemBonus: build.mods.Deception.ItemBonus
      diplomacy:
        ability: cha
        proficiency: build.proficiencies.diplomacy
        itemBonus: build.mods.Diplomacy.ItemBonus
      intimidation:
        ability: cha
        proficiency: build.proficiencies.intimidation
        itemBonus: build.mods.Intimidation.ItemBonus
      medicine:
        ability: wis
        proficiency: build.proficiencies.medicine
        itemBonus: build.mods.Medicine.ItemBonus
      nature:
        ability: wis
        proficiency: build.proficiencies.nature
        itemBonus: build.mods.Nature.ItemBonus
      occultism:
        ability: int
        proficiency: build.proficiencies.occultism
        itemBonus: build.mods.Occultism.ItemBonus
      performance:
        ability: cha
        proficiency: build.proficiencies.performance
        itemBonus: build.mods.Performance.ItemBonus
      religion:
        ability: wis
        proficiency: build.proficiencies.religion
        itemBonus: build.mods.Religion.ItemBonus
      society:
        ability: int
        proficiency: build.proficiencies.society
        itemBonus: build.mods.Society.ItemBonus
      stealth:
        ability: dex
        proficiency: build.proficiencies.stealth
        itemBonus: build.mods.Stealth.ItemBonus
      survival:
        ability: wis
        proficiency: build.proficiencies.survival
        itemBonus: build.mods.Survival.ItemBonus
      thievery:
        ability: dex
        proficiency: build.proficiencies.thievery
        itemBonus: build.mods.Thievery.ItemBonus
      perception:
        ability: wis
        proficiency: build.proficiencies.perception
        itemBonus: build.mods.Perception.ItemBonus

  # Skill proficiencies
  skillProficiencies:
    type: mapping
    output: extracted.skillProficiencies
    source: build.proficiencies
    mappings:
      acrobatics: acrobatics
      arcana: arcana
      athletics: athletics
      crafting: crafting
      deception: deception
      diplomacy: diplomacy
      intimidation: intimidation
      medicine: medicine
      nature: nature
      occultism: occultism
      performance: performance
      religion: religion
      society: society
      stealth: stealth
      survival: survival
      thievery: thievery
    transform: proficiencyCode

  # Defense values
  defenses:
    type: computed
    output: extracted.defenses
    mappings:
      ac:
        path: build.acTotal.acTotal
        formula: value
      fort:
        path: build.proficiencies.fortitude
        formula: 10 + value
      ref:
        path: build.proficiencies.reflex
        formula: 10 + value
      will:
        path: build.proficiencies.will
        formula: 10 + value

  # Archetypes extraction
  archetypes:
    type: featureSearch
    output: extracted.archetypes
    source: build.feats
    pattern: "Dedication"
    transform: removeSuffix

  # Spell traditions extraction
  magicTraditions:
    type: complex
    output: extracted.magicTraditions
    rules:
      - source: build.spellCasters
        condition: length > 0
        extraction:
          path: magicTradition
          condition: proficiency > 0
      - source: build.proficiencies
        condition: castingArcane > 0 || castingDivine > 0 || castingOccult > 0 || castingPrimal > 0
        extraction:
          mappings:
            - path: castingArcane
              value: Arcane
              condition: value > 0
            - path: castingDivine
              value: Divine
              condition: value > 0
            - path: castingOccult
              value: Occult
              condition: value > 0
            - path: castingPrimal
              value: Primal
              condition: value > 0

  # Tradition proficiencies
  traditionProficiencies:
    type: computed
    output: extracted.traditionProficiencies
    mappings:
      arcane: build.proficiencies.castingArcane
      divine: build.proficiencies.castingDivine
      occult: build.proficiencies.castingOccult
      primal: build.proficiencies.castingPrimal
    transform: proficiencyCode

  # Senses extraction
  senses:
    type: complex
    output: extracted.senses.allSenses
    rules:
      - source: build.specials
        condition: exists
        extraction:
          pattern:
            - darkvision
            - low-light vision
            - scent
            - tremorsense
          case: insensitive
      - source: build.ancestry
        condition: exists
        extraction:
          mappings:
            - value: dwarf
              result: Darkvision
            - value: gnome
              result: Low-Light Vision
            - value: half-orc
              result: Low-Light Vision
            - value: orc
              result: Darkvision
        resultCheck: not in result
      - source: build.familiars.abilities
        condition: exists
        extraction:
          pattern:
            - Darkvision
            - Low-Light Vision
            - Scent
            - Tremorsense
            - Echolocation
            - Greater Darkvision
            - See Invisibility
            - Wavesense
          transform: suffix(Familiar)

  # Healing abilities extraction
  healingAbilities:
    type: complex
    output: extracted.healingAbilities
    rules:
      - source: build.feats
        condition: exists
        extraction:
          list: true
          externalSource: healingAbilities
      - source: build.spellsKnown
        condition: exists
        extraction:
          pattern:
            - Heal
            - Soothe
          result: Healing Spells
          matchOne: true
      - source: build.focus
        condition: exists
        extraction:
          pattern:
            - Heal
            - Lay on Hands
            - Life Boost
          result: Focus Healing
          matchOne: true

# Transformations for extracted data
transformations:
  proficiencyCode:
    type: mapping
    mappings:
      0: U
      2: T
      4: E
      6: M
      8: L
    default: U

  removeSuffix:
    type: replace
    pattern: " Dedication"
    replacement: ""

  suffix:
    type: append
    format: "{0} ({1})"

# Formula definitions for calculated values
formulas:
  abilityModifier: "Math.floor((value - 10) / 2)"
  skillValue: "abilityMod + profBonus + itemBonus + (hasLevel ? level : 0)"
